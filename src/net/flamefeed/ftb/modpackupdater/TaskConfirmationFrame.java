/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package net.flamefeed.ftb.modpackupdater;

import com.jidesoft.swing.CheckBoxListSelectionModel;
import java.util.ListIterator;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author Francis
 */
public class TaskConfirmationFrame extends javax.swing.JFrame {

    // This is for storing the instance of the FileOperator which was
    // initialised in the main thread
    private final FileOperator fileOperator;
    
    /**
     * Creates new form TaskConfirmationFrame
     * 
     */
    
    public TaskConfirmationFrame() {
        // This class will manage all file related tasks. Constructor performs
        // program initialisation
        fileOperator = new FileOperator();  
        initComponents();
    }
    
    /**
     * This method is called once the download CheckBoxList is fully set up. It
     * fills the CheckBoxList with the download queue from the FileOperator
     */
    
    private void initDownloadCheckBoxList() {
        // The individual entries in the download list
        DefaultListModel downloadList = new DefaultListModel();

        // Iterate through all the files that were found to be missing by the FileOperator class
        ListIterator<String> downloadQueueIterator = fileOperator.getDownloadQueueIterator();
        
        while(downloadQueueIterator.hasNext()) {
            // Add the relative path of each file to the displayed list
            downloadList.addElement( downloadQueueIterator.next() );
        }
        
        // Update the GUI with the new ListModel
        downloadCheckBoxList.setModel(downloadList);
        
        // By default, all entries should be checked
        downloadCheckBoxList.selectAll();  
    }
    
    /**
     * This method is called once the removal CheckBoxList is fully set up. It
     * fills the CheckBoxList with the delete queue from the FileOperator
     */    
    
    private void initRemovalCheckBoxList() {
        // The individual entries in the removal list
        DefaultListModel removalList = new DefaultListModel();

        // Iterate through all the files should be deleted
        ListIterator<String> deleteQueueIterator = fileOperator.getDeleteQueueIterator();
        
        while(deleteQueueIterator.hasNext()) {
            // Add the relative path of each file to the displayed list
            removalList.addElement( deleteQueueIterator.next() );
        }
        
        // Update the GUI with the new ListModel
        removalCheckBoxList.setModel(removalList);
        
        // By default, all entries should be checked
        removalCheckBoxList.selectAll();        
    }    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        downloadCheckBoxList = new com.jidesoft.swing.CheckBoxList();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        removalCheckBoxList = new com.jidesoft.swing.CheckBoxList();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Beast Unleashed Modpack Updater");
        setResizable(false);

        jScrollPane3.setViewportView(downloadCheckBoxList);
        initDownloadCheckBoxList();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Download / Update List", null, jPanel3, "Files which will be downloaded from the remote server");

        jScrollPane4.setViewportView(removalCheckBoxList);
        initRemovalCheckBoxList();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Removal List", null, jPanel4, "Mod and config files to be deleted from your computer");

        jButton3.setText("Execute Changes");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setText("Select None");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Select All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // Execute indicated download and removal actions
        // Update the download and delete queues

        // A list of the states of all checkboxes in the download list
        CheckBoxListSelectionModel downloadCheckedModel = downloadCheckBoxList.getCheckBoxListSelectionModel();

        // A list of all file names in the download list
        ListModel downloadListModel = downloadCheckedModel.getModel();

        // If an entry in markedForDownload is unchecked, then remove it from markedForDownload
        for(int x=0; x < downloadListModel.getSize(); x++) {
            // If this entry is not checked
            if(!downloadCheckedModel.isSelectedIndex(x)) {
                // Delete it's ass
                fileOperator.removeFromDownloadQueue( downloadListModel.getElementAt(x).toString() );
            }
        }

        // Repeat for file removal list
        CheckBoxListSelectionModel removalCheckedModel = removalCheckBoxList.getCheckBoxListSelectionModel();
        ListModel removalListModel = removalCheckedModel.getModel();

        for(int x=0; x < removalListModel.getSize(); x++) {
            if(!removalCheckedModel.isSelectedIndex(x)) {
                fileOperator.removeFromDeleteQueue( removalListModel.getElementAt(x).toString() );
            }
        }
        
        /* Program execution will now continue inside the StatusFrame class,
           in the event dispatch thread and also swing worker threads. */
        
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                // By passing fileOperator to the StatusFrame, the download and
                // delete queues are passed with it.
                new StatusFrame(fileOperator).setVisible(true);          
            }
        });        
        
        // Close the TaskConfirmationFrame window
        this.dispose();          
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Cancel button closes the program
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Select none button
        int selectedTab = jTabbedPane2.getSelectedIndex();

        if(selectedTab == 0) {
            // Download / update tab is currently open
            downloadCheckBoxList.selectNone();
        }

        else if(selectedTab == 1) {
            // Removal tab is currently open
            removalCheckBoxList.selectNone();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Select all button
        int selectedTab = jTabbedPane2.getSelectedIndex();

        if(selectedTab == 0) {
            // Download / update tab is currently open
            downloadCheckBoxList.selectAll();
        }

        else if(selectedTab == 1) {
            // Removal tab is currently open
            removalCheckBoxList.selectAll();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.jidesoft.swing.CheckBoxList downloadCheckBoxList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane2;
    private com.jidesoft.swing.CheckBoxList removalCheckBoxList;
    // End of variables declaration//GEN-END:variables
}
